on:
  workflow_call:
    inputs:
      # Whether the project in question is open-source and releases should be published on the public container registry
      oss:
        required: false
        type: boolean
        default: false

      # Comma separated string of targets to build
      targets:
        required: true
        type: string

      registry_user:
        required: false
        type: string
        default: ${{ vars.REGISTRY_USER }}

    secrets:
      CI_SSH_PRIVATE_KEY:
        required: false
        description: |
          Private SSH key to use for cargo dependencies that need to
          either be fetched from private GitHub repositories or a
          private registry.
      registry_password:
        required: false
        description: |
          The password to use to push to the docker registry. If left
          unset, the GitHub token will be used instead.

env:
  RUSTC_WRAPPER: cachepot
  REGISTRY_SNAPSHOTS: registry.famedly.net/nightly
  REGISTRY_RELEASES: registry.famedly.net/docker-releases
  REGISTRY_OSS: registry.famedly.net/docker-oss

jobs:
  docker-publish:
    runs-on: ubuntu-latest-16core
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.CI_SSH_PRIVATE_KEY }}" || true

      # TODO: consider adding an intermediate `docker build -t base_image --target base` step
      # if current version rebuilds base stage for each target without caching. Ideally we want
      # one heavy stage with `cargo build` inside and then several small ones with just
      # `ADD --from base /workdir/target/release/the-bin /usr/local/the-bin`

      - name: Build
        shell: bash
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          for target in $(echo "${{ inputs.targets }}" | tr ',' '\n'); do
            echo "::group::Building ${target}"

            docker build --pull -t ${target} --target ${target} \
              --build-arg CARGO_REGISTRIES_FAMEDLY_INDEX="${{ vars.CARGO_REGISTRIES_FAMEDLY_INDEX }}" \
              --build-arg CARGO_BUILD_RUSTFLAGS="${CARGO_BUILD_RUSTFLAGS}" \
              --ssh default .

            echo "::endgroup::"
          done

      - name: Resolve registry to push
        shell: bash
        run: |
          if [ ${{ github.ref_type }} = 'branch' ]; then
            echo "REGISTRY=${{ env.REGISTRY_SNAPSHOTS }}" >> $GITHUB_ENV
          elif [ ${{ github.ref_type }} = 'tag' ]; then
            if [[ ${{ inputs.oss }} == true ]]; then
              echo "REGISTRY=${{ env.REGISTRY_OSS }}" >> $GITHUB_ENV
            else
              echo "REGISTRY=${{ env.REGISTRY_RELEASES }}" >> $GITHUB_ENV
            fi
            if ! [[ ${{ github.ref_name }} =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "REGISTRY=${{ env.REGISTRY_SNAPSHOTS }}" >> $GITHUB_ENV
            fi
          fi

      - name: Tag
        shell: bash
        if: env.REGISTRY != null
        run: |
          for target in $(echo "${{ inputs.targets }}" | tr ',' '\n'); do
            IMAGE_PATH="${{ env.REGISTRY }}/${target}"
            echo "::group::Tagging ${IMAGE_PATH}"

            if [ ${{ github.ref_type }} = 'branch' ]; then
              # Always tag the branch name of all services. Use the head_ref for PRs, ref for branches.
              # Replace / by - in branch names.
              REF_NAME=`echo "${{ github.head_ref || github.ref }}" | sed -r "s|^refs/heads/(.*)$|\1|" | sed -r "s|/|-|g"`
              docker tag ${target} "${IMAGE_PATH}:${REF_NAME}"
            elif [ ${{ github.ref_type }} = 'tag' ]; then
              # If tag contains only a version string, tag a new release
              if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                docker tag ${target} "${IMAGE_PATH}:latest"
              fi
              docker tag ${target} "${IMAGE_PATH}:${{ github.ref_name }}"
            fi

            docker tag ${target} "${IMAGE_PATH}:${{ github.sha }}"
            echo "::endgroup::"
          done

      - name: Log into registry ${{ env.REGISTRY }}
        uses: famedly/login-action@v2
        if: env.REGISTRY != null
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_password || secrets.GITHUB_TOKEN }}

      - name: Push
        if: env.REGISTRY != null
        shell: bash
        run: |
          for target in $(echo "${{ inputs.targets }}" | tr ',' '\n'); do
            IMAGE_PATH="${{ env.REGISTRY }}/${target}"
            echo "::group::Pushing ${IMAGE_PATH}"
            docker image push --all-tags "${IMAGE_PATH}"
            echo "::endgroup::"
          done
