on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        # docker.nexus.famedly.de is the private container registry
        # for public registry set input to docker-oss.nexus.famedly.de
        default: docker.nexus.famedly.de

      # Name of service.
      # Will be used as a last part of container path 
      # and matched with version tags if path is specified
      name:
        required: true
        type: string
      
      path:
        required: false
        type: string
        default: "."
      
      registry_user:
        required: false
        type: string
        default: famedly-ci
env:
  RUSTC_WRAPPER: cachepot

jobs:
  docker:
    runs-on: ubuntu-latest-16core
    env:
      IMAGE_PATH: "${{ inputs.registry }}/backend/${{ inputs.name }}"
    steps:
      - uses: actions/checkout@v3

      - name: Build container
        shell: bash
        run: |
          docker build --pull -t build_image -t "${IMAGE_PATH}:${{ github.sha }}" \
          -f "${{ inputs.path }}/Dockerfile" . \
          --build-arg CARGO_REGISTRIES_FAMEDLY_INDEX="${{ vars.CARGO_REGISTRIES_FAMEDLY_INDEX }}" \
          --build-arg KTRA_CARGO_TOKEN="${{ secrets.CRATE_REGISTRY_TOKEN }}" \
          --build-arg GIT_CRATE_INDEX_USER="${{ secrets.GITLAB_USER }}" \
          --build-arg GIT_CRATE_INDEX_PASS="${{ secrets.GITLAB_PASS }}" \
          --build-arg AWS_ACCESS_KEY_ID="${{ secrets.CACHEPOT_AWS_ACCESS_KEY_ID }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.CACHEPOT_AWS_SECRET_ACCESS_KEY }}" \
          --build-arg AWS_REGION="${{ vars.CACHEPOT_AWS_REGION }}" \
          --build-arg CACHEPOT_BUCKET="${{ vars.CACHEPOT_BUCKET }}" \
          --build-arg RUSTC_WRAPPER="${{ env.RUSTC_WRAPPER }}" \
          --build-arg CARGO_BUILD_RUSTFLAGS="${CARGO_BUILD_RUSTFLAGS}" \
          --build-arg CI_SSH_PRIVATE_KEY="${{ secrets.CI_SSH_PRIVATE_KEY }}"

      - name: Branches
        # Run for branches for both subfolders and root.
        if: github.ref_type == 'branch'
        shell: bash
        run: |
          # Always tag the branch name of all services. Use the head_ref for PRs, ref for branches.
          # Replace / by - in branch names.
          REF_NAME=`echo "${{ github.head_ref || github.ref }}" | sed -r "s|^refs/heads/(.*)$|\1|" | sed -r "s|/|-|g"`
          docker tag build_image "${IMAGE_PATH}:${REF_NAME}"

      - name: Tag for root services
        # Run if we are working on root Dockerfile for tags
        if: github.ref_type == 'tag' && inputs.path == '.'
        shell: bash
        run: |
          # If tag contains only a version string, tag a new release         
          if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            docker tag build_image "${IMAGE_PATH}:${{ github.ref_name }}"
            docker tag build_image "${IMAGE_PATH}:latest"
          # If tag contains a version string, but also some characters after it (beta version / RC / etc.)
          elif [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            docker tag build_image "${IMAGE_PATH}:${{ github.ref_name }}"
          # If tag doesn't contain any version string at all, tag the image with the tag
          elif ! [[ ${{ github.ref_name }} =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            docker tag build_image "${IMAGE_PATH}:${{ github.ref_name }}"
          fi
          # The rest will be version tags that are tagged for different service from monorepo

      - name: Subfolder tag
        # Run for subfolder services
        if: github.ref_type == 'tag' &&  inputs.path != '.'
        shell: bash
        run: |          
          # If it's a version tag for specific service, tag it with version
          if [[ ${{ github.ref_name }} =~ ^${{ inputs.name }}-v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=`echo "${{ github.ref_name }}" | sed -r "s/^${{ inputs.name }}-(v[0-9]+.[0-9]+.[0-9]+.*)$/\1/"`
            docker tag build_image "${IMAGE_PATH}:${VERSION}"
          # If it doesn't contain any version string, use it as-is
          elif ! [[ ${{ github.ref_name }} =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            docker tag build_image "${IMAGE_PATH}:${{ github.ref_name }}"
          fi

          # If it's a version tag without any additional release candidate / beta string etc., tag a latest release
          if [[ ${{ github.ref_name }} =~ ^${{ inputs.name }}-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            docker tag build_image "${IMAGE_PATH}:latest"
          fi          
          # The rest will be version tags that are tagged for different service from monorepo

      - name: Log into registry ${{ inputs.registry }}
        uses: famedly/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_password || secrets.GITHUB_TOKEN }}

      - name: Publish
        shell: bash
        run: |
          docker image push --all-tags "${IMAGE_PATH}"
