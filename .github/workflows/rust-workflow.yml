name: Rust workflow

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: ubuntu-latest

      run-doctests:
        description: |
          Whether to run doctests.

          Pure binary repos may not want this due to a long standing
          cargo bug: https://github.com/rust-lang/cargo/issues/5477
        required: false
        type: boolean
        default: true

      run-e2e-tests:
        description: |
          Whether to run e2e tests.
        required: false
        type: boolean
        default: false

      additional_packages:
        required: false
        description: |
          Additional ubuntu packages to install before running any
          commands.
        type: string

      container:
        type: string
        default: docker-nightly.nexus.famedly.de/rust-container:dev-tlater-entrypoint

      clippy_args: {required: false, type: string, default: ""}
      test_args: {required: false, type: string, default: ""}
      testcov_args: {required: false, type: string, default: ""}
      udeps_args: {required: false, type: string, default: ""}

    secrets:
      CI_SSH_PRIVATE_KEY:
        required: false
        description: |
          Private SSH key to use for cargo dependencies that need to
          either be fetched from private GitHub repositories or a
          private registry.
      CODECOV_TOKEN:
        required: false
        description: |
          Token to use when publishing code coverage results to
          codecov. If not specified, the coverage parts of this job
          will fail, however requiring secrets means that the
          `inherit` syntax does not work.

# Defined CI jobs.
jobs:
  rust-lints:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: ${{ inputs.container }}
      credentials:
        username: ${{ vars.NEXUS_REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    steps:
    - name: Run container entrypoint
      run: /entrypoint.sh
      env:
        FRC_SSH_KEY: ${{ secrets.CI_SSH_PRIVATE_KEY }}
        FRC_ADDITIONAL_PACKAGES: ${{ inputs.additional_packages }}


    - name: Checkout the repository to test
      uses: actions/checkout@v4

    - name: Tell git that the repo is safe
      run: git config --global --add safe.directory $(pwd)

    - name: Caching
      uses: Swatinem/rust-cache@68b3cb7503c78e67dae8373749990a220eb65352

    - name: Rustfmt
      shell: bash
      run: cargo +${NIGHTLY_VERSION} fmt -- --check

    - name: Clippy
      shell: bash
      run: cargo clippy --workspace --all-targets ${{inputs.clippy_args}} -- -D warnings

    - name: Udeps
      shell: bash
      run: cargo +${NIGHTLY_VERSION} udeps ${{inputs.udeps_args}}

    - name: Typos
      shell: bash
      run: typos # TODO: Use the typos action

  rust-tests:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: ${{ inputs.container }}
      credentials:
        username: ${{ vars.NEXUS_REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      volumes:
        # This permits running docker inside the container
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
    - name: Run container entrypoint
      run: /entrypoint.sh
      env:
        FRC_SSH_KEY: ${{ secrets.CI_SSH_PRIVATE_KEY }}
        FRC_ADDITIONAL_PACKAGES: ${{ inputs.additional_packages }}

    - name: Checkout the repository to test
      uses: actions/checkout@v4

    - name: Tell git that the repo is safe
      run: git config --global --add safe.directory $(pwd)

    - name: Caching
      uses: Swatinem/rust-cache@68b3cb7503c78e67dae8373749990a220eb65352

    - name: Unit and integration tests
      shell: bash
      run: cargo llvm-cov nextest --profile ci --workspace --lcov --output-path lcov.info ${{inputs.testcov_args}}

    - name: E2E tests
      if: inputs.run-e2e-tests
      run: |
        docker build --target test -t famedly-workflow-tests:latest .
        docker compose --project-directory tests/e2e/env up --quiet-pull --build --exit-code-from tests

    - name: Doc-test
      shell: bash
      if: inputs.run-doctests
      run: cargo +${NIGHTLY_VERSION} test --doc --workspace --verbose ${{inputs.test_args}}

    - name: Codecov - Upload coverage
      uses: codecov/codecov-action@v4
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        files: "lcov.info"

    - name: Codecov - Upload test results
      uses: codecov/test-results-action@v1
      with:
        token: ${{secrets.CODECOV_TOKEN}}
